---
export interface Props {
  title: string;
  description: string;
  frontmatter?: { [key: string]: string } | null;
}

var { title, description, frontmatter } = Astro.props;

if (!title && frontmatter) {
  title = frontmatter.title;
}

if (!description && frontmatter) {
  title = frontmatter.description;
}

import "@unocss/reset/normalize.css";
import "uno.css";

import Tracker from "@components/Tracker.astro";
import Navigation from "@components/Navigation.astro";
import Footer from "@components/Footer.astro";
import "@styles/fonts.css";
import "@styles/transitions.css";
import "@styles/global.css";
---

<!doctype html>
<html lang="en">
  <head>
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/favicon/apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/favicon/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="/favicon/favicon-16x16.png"
    />
    <link rel="manifest" href="/favicon/site.webmanifest" />
    <link
      rel="mask-icon"
      href="/favicon/safari-pinned-tab.svg"
      color="#376297"
    />
    <link rel="shortcut icon" href="/favicon/favicon.ico" />
    <meta name="msapplication-TileColor" content="#da532c" />
    <meta name="msapplication-config" content="/favicon/browserconfig.xml" />
    <meta name="theme-color" content="#ffffff" />
    <Tracker />
  </head>

  <body
    class="font-sans m-0 min-h-screen flex bg-light-50 flex-col"
    all="scroll-m-t-14"
  >
    <Navigation />

    <div class="pt-14 flex-grow">
      <main>
        <slot />
      </main>
    </div>

    <Footer />
    <style lang="scss">
      main {
        @apply max-w-screen-xl mx-auto grid grid-cols-12 my-6;
      }

      main > :global(div),
      main > :global(h1),
      main > :global(h2),
      main > :global(h3),
      main > :global(p) {
        --at-apply: col-span-12 col-start-1 max-w-full px-3 mb-3;
        --at-apply: "md:col-span-8 md:col-start-3";
        --at-apply: "lg:col-span-6 lg:col-start-3";
      }

      main :global(p) {
        --at-apply: mb-3 leading-7 text-justify;
      }

      main > :global(.hero) {
        --at-apply: "col-span-12 grid-start-1 text-center -mt-24";
      }

      main :global(.caption) {
        --at-apply: text-sm text-gray-700 text-center mt-2;
      }

      main > :global(pre), {
        --at-apply: col-span-12 col-start-1 max-w-full mx-3 mb-3 p-3 text-sm;
        --at-apply: "shadow-sm shadow-stone-500 rounded";
        --at-apply: "md:col-span-10 md:col-start-2 md:mx-0";
        --at-apply: "lg:col-span-9 lg:col-start-2";
      }

      main > :global(.wider) {
        --at-apply: "!px-0 py-2";
        --at-apply: "md:col-span-10 md:col-start-2";
        --at-apply: "lg:col-span-9 lg:col-start-2";
      }

      main > :global(.wider video),
      main > :global(.wider img) {
        --at-apply: "shadow-md shadow-stone-500 md:rounded";
      }

      main > :global(.aside) {
        --at-apply: "md:col-span-10 md:col-start-2 md:px-0";
        --at-apply: "lg:col-span-4 ld:col-start-9 lg:pl-3";
      }

      main :global(a) {
        font-weight: 500;
        --at-apply: "text-heeg-dark";
        --at-apply: "hover:text-heeg-active";
      }

      main :global(.icon) {
        display: inline-block;
        vertical-align: sub;
      }

      main :global(blockquote) {
        --at-apply: p-4 border-solid border-1 border-slate-300 border-l-solid
          border-l-4 border-l-slate-600 bg-slate-50 border-box shadow-sm;
      }

      main :global(blockquote p) {
        --at-apply: my-0 italic font-medium leading-relaxed text-gray-900;
      }

      main :global(blockquote h3) {
        --at-apply: mb-3;
      }

      body {
        font-size: 16px;
        color: #222;
      }
    </style>

    <script>
      const fade_in_elements = document.querySelectorAll(
        ".onscroll-fade-in, .onscroll-fade-right",
      );
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.remove("is-inactive");
              observer.unobserve(entry.target);
            }
          });
        },
        { rootMargin: "-50px" },
      );

      // Handle intersection for each element
      fade_in_elements.forEach((elm) => {
        elm?.classList.add("is-inactive");
        observer.observe(elm);
      });

      const scroll_right_elements = document.querySelectorAll(".scroll-right");
      scroll_right_elements.forEach((elm) => {
        elm.scrollLeft = elm.scrollWidth;
      });
    </script>
  </body>
</html>
