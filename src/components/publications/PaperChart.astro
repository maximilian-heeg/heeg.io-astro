---
import "charts.css";

export interface Props {
  citations_per_year: { year: string; number: number }[];
}

const { citations_per_year } = Astro.props;

const max_citations = Math.max(...citations_per_year.map((o) => o.number));
---

<div id="chart">
  <div class="data-title">Number of citations</div>
  <div class="table-container scroll-right">
    <table
      class="charts-css column show-data-on-hover show-labels data-spacing-5"
    >
      <thead>
        <tr>
          <th scope="col"> Year</th>
          <th scope="col"> Value</th>
        </tr>
      </thead>
      <tbody>
        {
          citations_per_year.map((x) => (
            <tr>
              <th>
                <span>{x.year}</span>
              </th>
              <td style={`--size: calc( ${x.number} / ${max_citations} )`}>
                <a href={`/publications/${x.year}#year`} aria-label={`${x.year}: ${x.number} citations`} />
                <span class="tooltip">{x.number}</span>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
</div>

<style>
  #chart .table-container {
    --at-apply: overflow-x-auto overflow-y-hidden pb-4 px-4;
  }

  #chart table {
    --at-apply: min-w-sm h-64 box-border;
  }

  #chart tr th span {
    --at-apply: "text-xs md:text-sm lg:text-base font-600 opacity-70";
  }

  #chart > .data-title {
    --at-apply: opacity-80 text-center ml-4 mr-19;
    --at-apply: "md:mr-4";
  }

  #chart table tbody td {
    --at-apply: "border-1 border-solid border-slate-800/95 scale-y-100 origin-bottom bg-gradient-to-t from-sky-700 to-sky-800";
    --at-apply: "hover:from-sky-600 hover:to-sky-700";
    transition: transform 2s, background-image 3s;
    transition-delay: 500ms, 0ms;
  }

  #chart.is-inactive table tbody td {
    --at-apply: scale-y-0;
  }
</style>

<script>
  const fade_in_elements = document.querySelectorAll("#chart");
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.remove("is-inactive");
        } else {
          entry.target.classList.add("is-inactive");
        }
      });
    },
    { rootMargin: "0px" }
  );

  // Handle intersection
  fade_in_elements.forEach((elm) => {
    observer.observe(elm);
  });
</script>
