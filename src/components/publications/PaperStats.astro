---
export interface Props {
	total_citations: number;
    total_publications: number;
    h_index: number;
    i10_index: number;
    last_update: string
}

const { total_publications, total_citations, h_index, i10_index, last_update } = Astro.props;

---

<div class="twocol twocol-table">
    <div class="stats">
      <div class="i-mdi-note-multiple-outline icon"></div>
      <div class="title">Total publications</div>
      <div class="number">{total_publications}</div>
      <div class="description"></div>
      
    </div>
    <div class="stats">
      <div class="i-mdi-format-quote-close-outline icon"></div>
      <div class="title">Total citations</div>
      <div class="number">{total_citations}</div>
      <div class="description"></div>
      
    </div>
    <div class="stats">
      <div class="i-mdi-human-greeting-proximity icon"></div>
      <div class="title">H index</div>
      <div class="number">{h_index}</div>
      <div class="description">h-index is the largest number h such that h publications have at least h citations.</div>

    </div>
    <div class="stats">
      <div class="i-mdi-wan icon"></div>
      <div class="title">i10 index</div>
      <div class="number">{i10_index}</div>
      <div class="description">i10-index is the number of publications with at least 10 citations.</div>
    </div>
  </div>
  <div class="source">
    Data from Google Scholar &#8212; last update on {last_update}
  </div>


<style>
    div.twocol {
      --at-apply: col-span-12 col-start-1 max-w-full px-3 mt-6 leading-7;
      --at-apply: "md:col-span-10 md:col-start-2";
      --at-apply: "lg:col-span-12 lg:col-start-1";
    }
  
    div.twocol {
      --at-apply: grid grid-cols-1;
      --at-apply: "md:grid-cols-2";
      --at-apply: "lg:grid-cols-4";
    }
  
    div.twocol-table {
      --at-apply: m-3 box-border grid grod-cols-1 gap-px bg-gray-200 rounded-md
        border shadow-md p-0 overflow-hidden;
    }
    .stats {
      --at-apply: "grid grid-cols-[1fr_60px] p-4 w-full bg-gray-50  text-left box-border transition-colors duration-300";
      --at-apply: "hover:bg-gray-100";
    }
  
    .stats div.icon {
      --at-apply: bg-heeg-dark w-10 h-10 transition-all duration-300 grid-col-start-2 row-span-3 my-auto mr-0 ml-auto;
    }
  
    .stats:hover div.icon {
      --at-apply: bg-heeg-active;
    }
  
    .stats div.title {
      --at-apply: grid-col-start-1 grid-row-start-1 opacity-60 text-center;
    }
  
    .stats div.number {
      --at-apply: grid-col-start-1 text-2xl font-medium text-center;
    }
  
    .stats div.description {
      --at-apply: grid-col-start-1 text-xs opacity-60 text-center;
    }
  
    
  
    div.source {
      --at-apply: col-span-12 col-start-1 text-right text-xs opacity-60 px-3;
      --at-apply: "md:col-span-10 md:col-start-2";
      --at-apply: "lg:col-span-12 lg:col-start-1";
    }
  
  </style>



<script>
    const numbers = document.querySelectorAll(".number");
    numbers?.forEach((number) => {
      const finalCount:number = parseInt(number.innerHTML);
      const animationDuration = 2000;
          // Calculate how long each ‘frame’ should last if we want to update the animation 60 times per second
          const frameDuration = 1000 / 60;
          // Use that to calculate how many frames we need to complete the animation
          const totalFrames = Math.round( animationDuration / frameDuration );
          // An ease-out function that slows the count as it progresses
          // https://easings.net/#easeInOutQuart
          const easingFun = x => x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;
          let frame = 0;
          let timer = setInterval(() => {
              frame++;
              const progress = easingFun( frame / totalFrames );
              let current = Math.round(finalCount * progress);
        number.innerHTML = current.toString();
              if ( frame === totalFrames ) {
                  current = Math.round(finalCount);
          number.innerHTML = current.toString();
                  clearInterval( timer );
          return;
              }
              }, frameDuration);
  
    });
  </script>