---
import "charts.css";

export interface Props {
  citations: { year: number;}[];
}

const { citations } = Astro.props;


let years = citations.reduce((p: { [key: string]: number }, c) => {
  if (c.year){
    var name = c.year.toString();
    if (!p.hasOwnProperty(name)) {
        p[name] = 0;
    }
    p[name]++;
  }
  return p;
}, {});

const max_citations = Math.max(...Object.values(years));

const table_wdith = Object.keys(years).length * 60 + "px";
---

<div id="chart">
    <div class="data-title"></div>
    <div class="table-container scroll-right">
      <table
        class="charts-css column show-data-on-hover show-labels data-spacing-5"
      >
        <thead>
          <tr>
            <th scope="col"> Year</th>
            <th scope="col"> Value</th>
          </tr>
        </thead>
        <tbody>
          {
            Object.keys(years).map((k) => (
              <tr>
                <th>
                  <span>{k}</span>
                </th>
                <td style={`--size: calc( ${years[k]} / ${max_citations} )`}>
                  <a href={`/publications/${years[k]}#year`} aria-label={`${k}: ${years[k]} citations`} />
                  <span class="tooltip">{years[k]}</span>
                </td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>
  </div> 
  
  <style define:vars={{ table_wdith }}>
    #chart .table-container {
      --at-apply: overflow-x-auto overflow-y-hidden pb-4 px-4;
    }
  
    #chart table {
      --at-apply: h-32 box-border;
      max-width: var(--table_wdith);
      margin-left: 0;
    }
  
    #chart tr th span {
      --at-apply: "text-xs md:text-sm lg:text-base font-600 opacity-70";
    }
  
    #chart > .data-title {
      --at-apply: opacity-80 text-center ml-4 mr-19;
      --at-apply: "md:mr-4";
    }
  
    #chart table tbody td {
      --at-apply: "border-1 border-solid border-slate-800/95 scale-y-100 origin-bottom bg-gradient-to-t from-sky-700 to-sky-800";
      --at-apply: "hover:from-sky-600 hover:to-sky-700";
      transition: transform 2s, background-image 3s;
      transition-delay: 500ms, 0ms;
    }
  
    #chart.is-inactive table tbody td {
      --at-apply: scale-y-0;
    }
  </style>
  
  <script>
    const fade_in_elements = document.querySelectorAll("#chart");
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.remove("is-inactive");
          } else {
            entry.target.classList.add("is-inactive");
          }
        });
      },
      { rootMargin: "0px" }
    );
  
    // Handle intersection
    fade_in_elements.forEach((elm) => {
      observer.observe(elm);
    });
  </script>