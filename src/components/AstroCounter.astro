---
export interface Props {
  number: number;
}

const { number } = Astro.props;
---

<astro-counter data-number={number}></astro-counter>

<script>
  class AstroCounter extends HTMLElement {
    constructor() {
      super();

      // Read the number from the data attribute.
      const number = this.dataset.number || "0";
      const finalCount = parseInt(number);

      const animationDuration = 2000;
      // Calculate how long each ‘frame’ should last if we want to update the animation 60 times per second
      const frameDuration = 1000 / 60;
      // Use that to calculate how many frames we need to complete the animation
      const totalFrames = Math.round(animationDuration / frameDuration);
      // An ease-out function that slows the count as it progresses
      // https://easings.net/#easeInOutQuart
      const easingFun = (x) =>
        x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;
      let frame = 0;
      let timer = setInterval(() => {
        frame++;
        const progress = easingFun(frame / totalFrames);
        let current = Math.round(finalCount * progress);
        this.innerHTML = current.toString();
        if (frame === totalFrames) {
          current = Math.round(finalCount);
          this.innerHTML = current.toString();
          clearInterval(timer);
          return;
        }
      }, frameDuration);
    }
  }

  customElements.define("astro-counter", AstroCounter);
</script>
