---
export interface Props {
  class: string;
  lines: string[];
}

const { lines, class: className, ...rest } = Astro.props;

function elemAttrs(arr: string[]): { [key: string]: string } {
  const obj: { [key: string]: string } = {};
  arr.forEach((value, index) => {
    obj[`data-line_${index + 1}`] = value;
  });
  return obj;
}
---

<astro-typewriter {...elemAttrs(lines)}>
  <pre class={className} {...rest} id="output">{lines[0]}</pre>
</astro-typewriter>

<script>
  class AstroTypewriter extends HTMLElement {
    textLines: (string | undefined)[];
    lineIndex: number;
    output: Element | null;

    constructor() {
      super();
      this.lineIndex = 0;
      this.output = null;
      this.textLines = this.getLine1Values(this.dataset);
      console.log(this.textLines);
    }

    connectedCallback() {
      this.render();
      this.typeNextLine();
    }

    render() {
      this.output = this.querySelector("#output");
      this.output = this.querySelector("#output");
      this.output && (this.output.textContent = "");
    }

    typeText(text: string | undefined, element: Element, delay = 80) {
      if (text) {
        let i = 0;
        const interval = setInterval(() => {
          element.textContent += text[i];
          i++;
          if (i === text.length) {
            clearInterval(interval);
            setTimeout(() => {
              const deleteInterval = setInterval(() => {
                if (element.textContent) {
                  element.textContent = element.textContent.slice(0, -1);
                  if (element.textContent === "") {
                    clearInterval(deleteInterval);
                    setTimeout(() => {
                      this.typeNextLine();
                    }, 500);
                  }
                }
              }, delay/2);
            }, 1000);
          }
        }, delay);
      }
    }

    typeNextLine() {
      if (this.output) {
        if (this.lineIndex < this.textLines.length) {
          this.typeText(this.textLines[this.lineIndex], this.output);
          this.lineIndex++;
        } else {
          this.lineIndex = 0;
          this.typeNextLine();
        }
      }
    }

    getLine1Values(obj: DOMStringMap): (string | undefined)[] {
      const line1Values = [];
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          if (key.startsWith("line_")) {
            line1Values.push(obj[key]);
          }
        }
      }
      return line1Values;
    }
  }

  customElements.define("astro-typewriter", AstroTypewriter);
</script>
